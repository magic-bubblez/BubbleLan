#!/usr/bin/env python3
"""
BubbleLan - A simple programming language interpreter
Usage:
    bubblelan <file.bub>     # Run a .bub file
    bubblelan                # Start REPL
"""

import sys
import os

script_dir = os.path.dirname(os.path.abspath(__file__))
sys.path.insert(0, script_dir)

from lexer import Tokenizer
from new_parser import Parser
from interpreter import Interpreter


def run_file(filename):
    try:
        with open(filename, 'r') as f:
            code = f.read()
        
        lexer = Tokenizer(code)
        parser = Parser(lexer)
        ast = parser.program()
        
        interpreter = Interpreter()
        for node in ast:
            interpreter.goto(node)
            
    except FileNotFoundError:
        print(f"Error: File '{filename}' not found")
        sys.exit(1)
    except Exception as e:
        print(f"Error: {e}")
        sys.exit(1)


def repl():
    banner = r"""
    ____        __    __    __     __                
   / __ )__  __/ /_  / /_  / /__  / /   ____ _____  
  / __  / / / / __ \/ __ \/ / _ \/ /   / __ `/ __ \ 
 / /_/ / /_/ / /_/ / /_/ / /  __/ /___/ /_/ / / / / 
/_____/\__,_/_.___/_.___/_/\___/_____/\__,_/_/ /_/  
                                                    
    """
    print(banner)
    print("Welcome to BubbleLan REPL!")
    print("Type 'q' to exit, 'help' for help")
    print()
    
    interpreter = Interpreter()
    
    while True:
        try:
            code = input(">>> ")
            
            if code.strip() in ['q', 'quit', 'exit']:
                print("byee!")
                break
            
            if code.strip() == 'help':
                print_help()
                continue
                
            if code.strip() == 'vars':
                print("Variables:", interpreter.env)
                continue
                
            if not code.strip():
                continue
                
            lexer = Tokenizer(code)
            parser = Parser(lexer)
            ast = parser.program()
            
            for node in ast:
                interpreter.goto(node)
                
        except KeyboardInterrupt:
            print("\nUse 'q' to exit")
        except EOFError:
            print("\nbyee!")
            break
        except Exception as e:
            print(f"Error: {e}")


def print_help():
    """Print help message"""
    help_text = """
BubbleLan Quick Reference:

VARIABLES:
  x = 5                    Assign number
  name = "Alice"           Assign string
  
LISTS:
  l = [1, 2, 3]           Create list
  say l[0]                Access element (0-indexed)
  
ARITHMETIC:
  x = 10 + 5              Addition
  x = 10 - 3              Subtraction
  x = 4 * 5               Multiplication
  x = 20 / 4              Division
  
COMPARISONS:
  x == 5                  Equal
  x != 5                  Not equal
  x < 10                  Less than
  x > 10                  Greater than
  
CONDITIONALS:
  if x > 0 then say "yes" else say "no"
  
LOOPS:
  for i in l: say i                Loop over list
  for i from 1 to 10: say i        Loop with range
  
OUTPUT:
  say x                   Print value
  
REPL COMMANDS:
  q, quit, exit           Exit REPL
  vars                    Show all variables
  help                    Show this help
"""
    print(help_text)


def main():
    if len(sys.argv) > 1:
        filename = sys.argv[1]
        if not filename.endswith('.bub'):
            print("Warning: BubbleLan files typically use .bub extension")
        run_file(filename)
    else:
        repl()


main()