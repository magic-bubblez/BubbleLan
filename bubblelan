#!/usr/bin/env python3
"""
BubbleLan - A simple programming language interpreter
Usage:
    bubblelan <file.bub>     # Run a .bub file
    bubblelan                # Start REPL
"""

import sys
import os

script_dir = os.path.dirname(os.path.abspath(__file__))
sys.path.insert(0, script_dir)

from lexer import Tokenizer
from new_parser import Parser
from interpreter import Interpreter


def run_file(filename):
    try:
        with open(filename, 'r') as f:
            code = f.read()
        
        lexer = Tokenizer(code)
        parser = Parser(lexer)
        ast = parser.program()
        
        interpreter = Interpreter()
        for node in ast:
            interpreter.goto(node)
            
    except FileNotFoundError:
        print(f"Error: File '{filename}' not found")
        sys.exit(1)
    except Exception as e:
        print(f"Error: {e}")
        sys.exit(1)


def repl():
    banner = r"""
    ____        __    __    __     __                
   / __ )__  __/ /_  / /_  / /__  / /   ____ _____  
  / __  / / / / __ \/ __ \/ / _ \/ /   / __ `/ __ \ 
 / /_/ / /_/ / /_/ / /_/ / /  __/ /___/ /_/ / / / / 
/_____/\__,_/_.___/_.___/_/\___/_____/\__,_/_/ /_/  
                                                    
    """
    print(banner)
    print("Welcome to BubbleLan REPL!")
    print("Type 'q' to exit, 'help' for help")
    print()
    
    interpreter = Interpreter()
    
    while True:
        try:
            code = input(">>> ")
            
            if code.strip() in ['q', 'quit', 'exit']:
                print("byee!")
                break
            
            if code.strip() == 'help':
                print_help()
                continue
                
            if code.strip() == 'vars':
                print("Variables:", interpreter.env)
                continue
                
            if not code.strip():
                continue
                
            lexer = Tokenizer(code)
            parser = Parser(lexer)
            ast = parser.program()
            
            for node in ast:
                interpreter.goto(node)
                
        except KeyboardInterrupt:
            print("\nUse 'q' to exit")
        except EOFError:
            print("\nbyee!")
            break
        except Exception as e:
            print(f"Error: {e}")


def print_help():
    print("""
BubbleLan - A simple programming language interpreter

Usage:
    bubblelan <file.bub>     Run a .bub file
    bubblelan                Start REPL mode
    bubblelan -h, --help     Show this help message

Examples:
    bubblelan hello.bub
    bubblelan
""")

def main():
    if len(sys.argv) == 1:
        repl()
    elif len(sys.argv) == 2:
        if sys.argv[1] in ['-h', '--help']:
            print_help()
        else:
            # one argument, treat it as a filename
            run_file(sys.argv[1])
    else:
        print("Usage: bubblelan [file.bub]")
        print("       bubblelan       (start REPL)")
        sys.exit(1)

main()
